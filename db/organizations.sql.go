// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: organizations.sql

package db

import (
	"context"
)

const createOrganization = `-- name: CreateOrganization :one
INSERT INTO organizations (
    login,
    name
) VALUES (
    $1,
    $2
) RETURNING id, login, name, created_at, updated_at, deleted_at
`

type CreateOrganizationParams struct {
	Login string
	Name  string
}

func (q *Queries) CreateOrganization(ctx context.Context, arg CreateOrganizationParams) (Organization, error) {
	row := q.db.QueryRowContext(ctx, createOrganization, arg.Login, arg.Name)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteOrganization = `-- name: DeleteOrganization :exec
UPDATE organizations
SET deleted_at = now()
WHERE id = $1
`

func (q *Queries) DeleteOrganization(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteOrganization, id)
	return err
}

const deleteOrganizationByLogin = `-- name: DeleteOrganizationByLogin :exec
UPDATE organizations
SET deleted_at = now()
WHERE login = $1 AND deleted_at IS NULL
`

func (q *Queries) DeleteOrganizationByLogin(ctx context.Context, login string) error {
	_, err := q.db.ExecContext(ctx, deleteOrganizationByLogin, login)
	return err
}

const getOrganizationByID = `-- name: GetOrganizationByID :one
SELECT id, login, name, created_at, updated_at, deleted_at FROM organizations
WHERE id = $1 AND deleted_at IS NULL
LIMIT 1
`

func (q *Queries) GetOrganizationByID(ctx context.Context, id int32) (Organization, error) {
	row := q.db.QueryRowContext(ctx, getOrganizationByID, id)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getOrganizationByLogin = `-- name: GetOrganizationByLogin :one
SELECT id, login, name, created_at, updated_at, deleted_at FROM organizations
WHERE login = $1 AND deleted_at IS NULL
LIMIT 1
`

func (q *Queries) GetOrganizationByLogin(ctx context.Context, login string) (Organization, error) {
	row := q.db.QueryRowContext(ctx, getOrganizationByLogin, login)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listOrganizations = `-- name: ListOrganizations :many
SELECT id, login, name, created_at, updated_at, deleted_at FROM organizations
WHERE deleted_at IS NULL
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListOrganizationsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListOrganizations(ctx context.Context, arg ListOrganizationsParams) ([]Organization, error) {
	rows, err := q.db.QueryContext(ctx, listOrganizations, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Organization
	for rows.Next() {
		var i Organization
		if err := rows.Scan(
			&i.ID,
			&i.Login,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrganization = `-- name: UpdateOrganization :one
UPDATE organizations
SET name = $2
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, login, name, created_at, updated_at, deleted_at
`

type UpdateOrganizationParams struct {
	ID   int32
	Name string
}

func (q *Queries) UpdateOrganization(ctx context.Context, arg UpdateOrganizationParams) (Organization, error) {
	row := q.db.QueryRowContext(ctx, updateOrganization, arg.ID, arg.Name)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
