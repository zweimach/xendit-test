// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: comments.sql

package db

import (
	"context"
)

const createCommentByOrganizationLogin = `-- name: CreateCommentByOrganizationLogin :one
INSERT INTO comments (
    organization_id,
    text
)
SELECT o.id, $1 FROM organizations AS o
WHERE o.login = $2 AND deleted_at IS NULL
LIMIT 1
RETURNING id, user_id, organization_id, text, created_at, updated_at, deleted_at
`

type CreateCommentByOrganizationLoginParams struct {
	Text  string
	Login string
}

func (q *Queries) CreateCommentByOrganizationLogin(ctx context.Context, arg CreateCommentByOrganizationLoginParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, createCommentByOrganizationLogin, arg.Text, arg.Login)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OrganizationID,
		&i.Text,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteCommentsByOrganizationLogin = `-- name: DeleteCommentsByOrganizationLogin :exec
UPDATE comments AS c
SET deleted_at = now()
FROM organizations AS o
WHERE c.organization_id = o.id
    AND o.login = $1
    AND o.deleted_at IS NULL
    AND c.deleted_at IS NULL
`

func (q *Queries) DeleteCommentsByOrganizationLogin(ctx context.Context, login string) error {
	_, err := q.db.ExecContext(ctx, deleteCommentsByOrganizationLogin, login)
	return err
}

const listCommentsByOrganizationLogin = `-- name: ListCommentsByOrganizationLogin :many
SELECT c.id, c.user_id, c.organization_id, c.text, c.created_at, c.updated_at, c.deleted_at FROM comments AS c
INNER JOIN organizations AS o
ON o.id = c.organization_id
WHERE o.login = $1 AND o.deleted_at IS NULL AND c.deleted_at IS NULL
ORDER BY c.id
LIMIT $2
OFFSET $3
`

type ListCommentsByOrganizationLoginParams struct {
	Login  string
	Limit  int32
	Offset int32
}

func (q *Queries) ListCommentsByOrganizationLogin(ctx context.Context, arg ListCommentsByOrganizationLoginParams) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, listCommentsByOrganizationLogin, arg.Login, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.OrganizationID,
			&i.Text,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
