// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: users.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    login,
    name,
    avatar_url
) VALUES (
    $1,
    $2,
    $3
) RETURNING id, login, name, followers, follows, avatar_url, created_at, updated_at, deleted_at
`

type CreateUserParams struct {
	Login     string
	Name      string
	AvatarUrl sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Login, arg.Name, arg.AvatarUrl)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.Name,
		&i.Followers,
		&i.Follows,
		&i.AvatarUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
UPDATE users
SET deleted_at = now()
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, login, name, followers, follows, avatar_url, created_at, updated_at, deleted_at FROM users
WHERE id = $1 AND deleted_at IS NULL
LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.Name,
		&i.Followers,
		&i.Follows,
		&i.AvatarUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByLogin = `-- name: GetUserByLogin :one
SELECT id, login, name, followers, follows, avatar_url, created_at, updated_at, deleted_at FROM users
WHERE login = $1 AND deleted_at IS NULL
LIMIT 1
`

func (q *Queries) GetUserByLogin(ctx context.Context, login string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByLogin, login)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.Name,
		&i.Followers,
		&i.Follows,
		&i.AvatarUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, login, name, followers, follows, avatar_url, created_at, updated_at, deleted_at FROM users
WHERE deleted_at IS NULL
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Login,
			&i.Name,
			&i.Followers,
			&i.Follows,
			&i.AvatarUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsersByOrganizationLogin = `-- name: ListUsersByOrganizationLogin :many
SELECT u.id, u.login, u.name, u.followers, u.follows, u.avatar_url, u.created_at, u.updated_at, u.deleted_at FROM users AS u
INNER JOIN memberships AS m
ON m.user_id = u.id
INNER JOIN organizations AS o
ON m.organization_id = o.id
WHERE o.login = $1
    AND o.deleted_at IS NULL
    AND u.deleted_at IS NULL
    AND m.deleted_at IS NULL
ORDER BY u.id
LIMIT $2
OFFSET $3
`

type ListUsersByOrganizationLoginParams struct {
	Login  string
	Limit  int32
	Offset int32
}

func (q *Queries) ListUsersByOrganizationLogin(ctx context.Context, arg ListUsersByOrganizationLoginParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsersByOrganizationLogin, arg.Login, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Login,
			&i.Name,
			&i.Followers,
			&i.Follows,
			&i.AvatarUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET name = $2, avatar_url = $3
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, login, name, followers, follows, avatar_url, created_at, updated_at, deleted_at
`

type UpdateUserParams struct {
	ID        int32
	Name      string
	AvatarUrl sql.NullString
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser, arg.ID, arg.Name, arg.AvatarUrl)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.Name,
		&i.Followers,
		&i.Follows,
		&i.AvatarUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
