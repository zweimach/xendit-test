// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: memberships.sql

package db

import (
	"context"
	"database/sql"
)

const createMembership = `-- name: CreateMembership :one
INSERT INTO memberships (
    user_id,
    organization_id
) VALUES (
    $1,
    $2
) RETURNING user_id, organization_id, created_at, updated_at, deleted_at
`

type CreateMembershipParams struct {
	UserID         int32
	OrganizationID int32
}

func (q *Queries) CreateMembership(ctx context.Context, arg CreateMembershipParams) (Membership, error) {
	row := q.db.QueryRowContext(ctx, createMembership, arg.UserID, arg.OrganizationID)
	var i Membership
	err := row.Scan(
		&i.UserID,
		&i.OrganizationID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteMembership = `-- name: DeleteMembership :exec
UPDATE comments
SET deleted_at = now()
WHERE user_id = $1 AND organization_id = $2
`

type DeleteMembershipParams struct {
	UserID         sql.NullInt32
	OrganizationID int32
}

func (q *Queries) DeleteMembership(ctx context.Context, arg DeleteMembershipParams) error {
	_, err := q.db.ExecContext(ctx, deleteMembership, arg.UserID, arg.OrganizationID)
	return err
}

const getMembershipByID = `-- name: GetMembershipByID :one
SELECT user_id, organization_id, created_at, updated_at, deleted_at FROM memberships
WHERE user_id = $1 AND organization_id = $2 AND deleted_at IS NULL
LIMIT 1
`

type GetMembershipByIDParams struct {
	UserID         int32
	OrganizationID int32
}

func (q *Queries) GetMembershipByID(ctx context.Context, arg GetMembershipByIDParams) (Membership, error) {
	row := q.db.QueryRowContext(ctx, getMembershipByID, arg.UserID, arg.OrganizationID)
	var i Membership
	err := row.Scan(
		&i.UserID,
		&i.OrganizationID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listMemberships = `-- name: ListMemberships :many
SELECT user_id, organization_id, created_at, updated_at, deleted_at FROM memberships
WHERE deleted_at IS NULL
LIMIT $1
OFFSET $2
`

type ListMembershipsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListMemberships(ctx context.Context, arg ListMembershipsParams) ([]Membership, error) {
	rows, err := q.db.QueryContext(ctx, listMemberships, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Membership
	for rows.Next() {
		var i Membership
		if err := rows.Scan(
			&i.UserID,
			&i.OrganizationID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
